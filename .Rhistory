gdp <- dplyr::select(which(!is.na(gdp$X.1))))
gdp1 <- dplyr::select(which(!is.na(gdp$X.1)))
gdp1 <- dplyr::select(gdp, !is.na(gdp$X.1))
gdp1 <- dplyr::filter(gdp, !is.na(gdp$X.1))
gdp1 <- dplyr::filter(gdp, !is.na(gdp$X))
gdp1 <- dplyr::filter(gdp, !is.na(gdp$X.2))
gdp1 <- dplyr::filter(gdp, !is.na(gdp$X))
gdp$X
class(gdp$X)
gdp$X <- relevel(gdp$X)
unclass(gdp$X)
as.character(gdp$X)
gdp$X <- as.character(gdp$X)
class(gdp$X)
gdp1 <- dplyr::filter(gdp, X != "")
gdp1$X
table(edstat$CountryCode %in% gdp[,1])
table(edstat$CountryCode %in% gdp1[,1])
summary(gdp[1])
summary(gdp[1,])
summary(gdp[,1])
summary(gdp1[,1])
gdp1 <- dplyr::filter(gdp, X != "")
gdp1 <- dplyr::filter(gdp, length(X) != 0)
gdp1 <- gdp[gdp$X != "",]
gdp1$X
unique( gdp1$X)
intersect(edstat$CountryCode, gdp1$X)
gdp1 <- gdp[gdp$X != "" & gdp$X.1 != NA,]
class(gdp$X.1)
gdp$X.1
gdp$X.1 <- as.numeric(gdp$X.1)
class(gdp$X.1)
gdp1 <- gdp[gdp$X != "" & gdp$X.1 != NA,]
gdp$X.1[1]
gdp$X.1[190]
gdp$X.1[200]
gdp$X.1[201]
gdp <- read.csv("getdata-data-GDP.csv", skip = 4)
summary(gdp)
gdp <- read.csv("getdata-data-GDP.csv", skip = 4, nrows = 190)
intersect(edstat$CountryCode, gdp1$X)
class(edstat$CountryCode)
edstat$CountryCode <- as.character(edstat$CountryCode)
class(edstat$CountryCode)
summary(edstat$CountryCode)
str(edstat$CountryCode)
gdp$X <- as.character(gdp$X)
gdp$X
length(gdp$X)
intersect(edstat$CountryCode, gdp1$X)
intersect(edstat$CountryCode, gdp1$X)
intersect(edstat$CountryCode, gdp$X)
length(intersect(edstat$CountryCode, gdp$X))
gdp$X.1 <- as.character(gdp$X.1)
dplyr::arrange(gdp, X.1)
dplyr::arrange(gdp, as.integer(X.1))
asdsda
edstat$Income.Group
library(dplyr)
summarise(group_by(edstat, Income.Group), mean)
newstuff <- merge(edstat, gdp, by.x = CountryCode, by.y = X)
newstuff <- merge(edstat, gdp, by.x = edstat$CountryCode, by.y = X)
newstuff <- merge(edstat, gdp, by.x = edstat$CountryCode, by.y = gdp$X)
newstuff <- merge(edstat, gdp, by.x = "CountryCode", by.y = "X")
summarise(order_by(newstuff, Income.Group))
summarise(order_by(newstuff, Income.Group), mean)
summarise(order_by(newstuff, Income.Group), a <- mean)
summarise(order_by(newstuff, Income.Group), a = mean)
summarise(order_by(newstuff, Income.Group), a = mean(newstuff$X.1))
order_by(newstuff, Income.Group)
mean(newstuff$X.1)
newstuff$X.1
as.numeric(newstuff$X.1)
unclass(newstuff$X.1)
class(newstuff$X.1)
newstuff$X.1 <- as.numeric(newstuff$X.1)
mean(newstuff$X.1)
order_by(newstuff, Income.Group)
dplyr::order_by(newstuff, Income.Group)
summarise(group_by(newstuff, Income.Group), a = mean(newstuff$X.1))
summarise(group_by(newstuff, Income.Group), a = mean(X.1))
q <- quantile(newstuff$X.1, seq(from = 0, to = 1, length.out = 5))
q
q <- quantile(newstuff$X.1, c(0.2, 0.4, 0.06, 0.8, 1)
)
q
length(newstuff$X.1)
ftstuff <- filter(newstuff, X.1 >= 1 & X.1 <= 38)
ftstuff$Income.Group
filter(ftstuff, ftstuff$Income.Group == "Lower middle income")
res <- filter(ftstuff, ftstuff$Income.Group == "Lower middle income")
str(res)
demo()
library(swirl)
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?selct
?select
select(cran, ip_dp, package, contry)
select(cran, ip_id, package, contry)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_i)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, contry, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise()
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$uniq, probs = 0.99)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res < gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
?spread
submit()
submit()
submit()
submit()
extract_numeric("class")
extract_numeric("class5")
submit()
submit()
extract_numeric(res$sex_class)
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(passed, status = "failed")
failed <- mutate(fauled, status = "failed")
failed <- mutate(failed, status = "failed")
passed
failed
reset()
s
bind_rows(passed, failed)
sat
submit()
sat %>%
select(-contains("total"))
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range)
submit()
submit()
Sys.getlocale()
Sys.getlocale("LC_TIME")
library(lubr)
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
today()
this_day <- today()
this_day
day(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_day)
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1985")
mdy("March 12, 1985")
ymd("March 12, 1985")
mdy("March 12, 1975")
mdy("25081985")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("192012//")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 3, minutes = 25)
this_moment <- update(this_moment, hours = 3, minutes = 25)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
how_long
as.period(how_long)
stopwatch()
rm(list = ls())
test <- read.csv("UCI HAR Dataset/test/X_test.txt", header = FALSE)
dim(test)
train <- read.csv("UCI HAR Dataset/train/X_train.txt", header = FALSE)
test_activity <- read.csv("UCI HAR Dataset/test/y_test.txt", header = FALSE)
train_activity <- read.csv("UCI HAR Dataset/train/y_train.txt", header = FALSE)
column_labels <- read.csv("UCI HAR Dataset/features.txt", header = FALSE
)
class(test)
class(test_activity)
t <- cbind(test, test_activity)
source('~/GetCleanCourse/run_analysis.R')
source('~/GetCleanCourse/run_analysis.R')
View(column_labels)
source('~/GetCleanCourse/run_analysis.R')
source('~/GetCleanCourse/run_analysis.R')
View(column_labels)
class(column_labels$V2)
t <- cbind(test, test_activity)
zxc <- c(as.character(column_labels$V2), "activity")
class(zxc)
colnames(t) <- zxc
source('~/GetCleanCourse/run_analysis.R')
source('~/GetCleanCourse/run_analysis.R')
library(dplyr)
selected <- select(t, contains("mean") | contains("std"))
selected <- select(tbl_df(t), contains("mean") | contains("std"))
class(t)
selected <- select(t, contains("mean")
)
source('~/GetCleanCourse/run_analysis.R')
t <- rbind(test, train)
rm(list = ls())
source('~/GetCleanCourse/run_analysis.R')
class(column_labels$V1)
ols_with_mean <- column_labels %>% select(contains("mean"))
cols_with_std <- column_labels %>% select(contains("std"))
cols_to_select <- rbind(cols_with_mean, cols_with_std) %>% arrange(desc(V1))
View(ols_with_mean)
rm(ols_with_mean)
new_names <- make.names(column_labels, unique = TRUE, allow_ = TRUE)
new_names <- make.names(as.charachter(column_labels), unique = TRUE, allow_ = TRUE)
new_names <- make.names(as.character(column_labels), unique = TRUE, allow_ = TRUE)
new_names
new_names <- make.names(as.character(column_labels$V2), unique = TRUE, allow_ = TRUE)
new_names
colnames(combined_data) <- new_names
sel_mean <- dplyr::select(combined_data, contains("mean"))
sel_mean <- dplyr::select(combined_data, contains("std"))
sel_mean <- dplyr::select(combined_data, contains("mean"))
sel_std <- dplyr::select(combined_data, contains("mean"))
sel_std <- dplyr::select(combined_data, contains("std"))
selcted_data <- cbind(sel_mean, sel_std)
selected_data <- cbind(sel_mean, sel_std)
rm(selcted_data)
names(selected_data)
data <- cbind(combined_subjects, combined_activity, selected_data)
colnames(data) <- c("subject", "activity", colnames(data))
colnames(combined_subjects) <- "subject"
source('~/GetCleanCourse/run_analysis.R')
names(data)
sapply(data, class)
activity_labels <- read.table("UCI HAR Dataset/activity_labels.txt", header = FALSE)
activity_labels
uniqu(data$activity)
unique(data$activity)
sapply(activity_labels, class)
activity_labels <- read.table("UCI HAR Dataset/activity_labels.txt", header = FALSE, stringsAsFactors = FALSE)
sapply(activity_labels, class)
plyr::mapvalues(data, activity_labels$V1, activity_labels$V2)
plyr::mapvalues(data$activity, activity_labels$V1, activity_labels$V2)
class(data$activity)
data$activity[1]
View(data)
data$activity <- plyr::mapvalues(data$activity, activity_labels$V1, activity_labels$V2)
class(data$activvity)
class(data$activity)
View(data)
names(data)
source('C:/repos/GetAndCleanAssignment/run_analysis.R')
d <- read.csv("C:/Users/op/Downloads/getdata-data-ss06hid (2).csv")
sn <- strsplit(names(d), "wgtp")
sn[123]
strsplit("w5", "w")
d <- read.csv("C:/Users/op/Downloads/getdata-data-GDP (1).csv")
head(d)
d <- read.csv("C:/Users/op/Downloads/getdata-data-GDP (1).csv", skip = 4)
head(d)
d <- read.csv("C:/Users/op/Downloads/getdata-data-GDP (1).csv", skip = 3)
head(d)
d <- read.csv("C:/Users/op/Downloads/getdata-data-GDP (1).csv", skip = 4)
head(d)
tail(d)
d <- read.csv("C:/Users/op/Downloads/getdata-data-GDP (1).csv", skip = 4, nrows = 130)
d
d <- read.csv("C:/Users/op/Downloads/getdata-data-GDP (1).csv", skip = 4, nrows = 190)
d
d <- read.csv("C:/Users/op/Downloads/getdata-data-GDP (1).csv", skip = 4, nrows = 191)
d
d <- read.csv("C:/Users/op/Downloads/getdata-data-GDP (1).csv", skip = 4, nrows = 190)
d
head(d)
dat <- d$X.4
class(dat)
dat <- as.character(dat)
class)dat
class(dat)
dat <- gsub(",", "", dat)
dat
mean(as.integer(dat))
head(d)
grep("^United", d$X)
grep("^United", as.character(d$X))
grep("^United", as.character(d$X.1))
grep("^United", as.character(d$X.3))
grep("*United", as.character(d$X.3))
grep("United", as.character(d$X.3))
s <- read.csv("C:/Users/op/Downloads/getdata-data-EDSTATS_Country (1).csv")
head(s)
names(s)
s$Special.Notes
class(s$Special.Notes)
s$Special.Notes <- as.character(s$Special.Notes)
dat <- grep("^Fiscal year end*June", s$Special.Notes)
dat <- grep("^Fiscal year end*June*", s$Special.Notes)
dat <- grep("^(Fiscal year end)", s$Special.Notes)
dat
dat <- grep("^(Fiscal year end)*June", s$Special.Notes)
dat <- s$Special.Notes[grep("^(Fiscal year end)*June", s$Special.Notes)]
dat
dat <- s$Special.Notes[grep("^(Fiscal year end)", s$Special.Notes)]
dat
dat <- s$Special.Notes[grep("^(Fiscal year end).*June", s$Special.Notes)]
dat
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
table(sampleTimes)
class(sampleTimes)
library(lubridate)
fs <- sampleTimes[year(sampleTimes) == 2012]
ss <- wday(fs) == "mon"
ss <- fs[wday(fs) == "mon"]
ss <- fs[wday(fs) == "Mon"]
ss <- fs[wday(fs) == "monday"]
ss <- fs[wday(fs) == "Monday"]
ss <- fs[wday(fs) == 1]
ss <- fs[wday(fs) == 2]
getwd()
setwd("C:/Users/op/Documents/StatInfCourse/")
cumsum(1:3)
cumsum(1:10)
cumsum(1:100)
cumsum(1:1000)
repeat()
repeat(1,3)
repeat(1)
repeat{getwd()}
means <- NULL
means <- for(i in 1:1000) means <- c(means, mean(rexp(40, 0.2)))
hist(means)
means <- for(i in 1:1000) means = c(means, mean(rexp(40, 0.2)))
means <- NULL
means <- for(i in 1:1000) means = c(means, mean(rexp(40, 0.2)))
hist(means)
means = NULL
means <- for(i in 1:1000) means = c(means, mean(rexp(40, 0.2)))
means <- NULL
for(i in 1:1000) means = c(means, mean(rexp(40, 0.2)))
hist(means)
means <- NULL
for(i in 1:1000) means <- c(means, mean(rexp(40, 0.2)))
hist(means)
means <- NULL
for(i in 1:1000) means <- c(means, mean(rexp(40, 0.2)))
hist(means)
means <- NULL
for(i in 1:1000) means <- c(means, mean(rexp(40, 0.2)))
hist(means)
means <- NULL
for(i in 1:1000) means <- c(means, mean(rexp(40, 0.2)))
hist(means)
hist(means, breaks = seq(from = min(means), to = max(means), by = 0.2))
seq(from = min(means), to = max(means), by = 0.2)
hist(means, breaks = 20)
hist(means, breaks = 40)
hist(means, breaks = 60)
hist(means, breaks = 39)
hist(means, breaks = 30)
mean(means)
hist(means, breaks = 20)
hist(means, breaks = 10)
hist(means, breaks = 20)
sd(means)
5/sqrt(40)
x <- rnorm(1000, mean = 0.2, sd = sqrt(0.2))
lines(x)
lines(x*100)
hist(x)
hist(means)
hist(means, probability = TRUE)
curve(dnorm, mean = 0.2, sd = 0.2)
hist(means, probability = TRUE)
curve(dnorm, mean = 1/0.2, sd = 1/0.2, col = 2)
rm(x)
hist(means)
curve(dnorm, mean = 1/0.2, sd = 1/0.2, col = 2, add = TRUE)
hist(means, probability = TRUE)
hist(means, probability = TRUE)
curve(dnorm, col = "red", add = TRUE, mean = 1/0.2, sd = 1/0.2)
curve(dnorm(mean = 1/0.2, sd = 1/0.2), col = "red", add = TRUE)
curve(dnorm(x = pnorm(seq(from = 0, to = 8, by = 0.1)), mean = 1/0.2, sd = 1/0.2), col = "red", add = TRUE)
curve(dnorm(x, mean = 1/0.2, sd = 1/0.2), col = "red", add = TRUE)
curve(dnorm(x, mean = 5, sd = 1/0.2), col = "red", add = TRUE)
means <- NULL
for(i in 1:1000) means <- c(means, mean(rexp(40, 0.2)))
means <- NULL
for(i in 1:1000) means <- c(means, mean(rexp(40, 0.2)))
hist(means, probability = TRUE)
curve(dnorm(x, mean = 1/0.2, sd = (1/0.2)/sqrt(40)), col = "red", add = TRUE)
